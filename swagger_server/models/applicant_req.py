# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApplicantReq(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, industry: str=None, area: str=None, applicant: str=None, key: str=None, theme: str=None):  # noqa: E501
        """ApplicantReq - a model defined in Swagger

        :param industry: The industry of this ApplicantReq.  # noqa: E501
        :type industry: str
        :param area: The area of this ApplicantReq.  # noqa: E501
        :type area: str
        :param applicant: The applicant of this ApplicantReq.  # noqa: E501
        :type applicant: str
        :param key: The key of this ApplicantReq.  # noqa: E501
        :type key: str
        :param theme: The theme of this ApplicantReq.  # noqa: E501
        :type theme: str
        """
        self.swagger_types = {
            'industry': str,
            'area': str,
            'applicant': str,
            'key': str,
            'theme': str
        }

        self.attribute_map = {
            'industry': 'industry',
            'area': 'area',
            'applicant': 'applicant',
            'key': 'key',
            'theme': 'theme'
        }
        self._industry = industry
        self._area = area
        self._applicant = applicant
        self._key = key
        self._theme = theme

    @classmethod
    def from_dict(cls, dikt) -> 'ApplicantReq':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApplicantReq of this ApplicantReq.  # noqa: E501
        :rtype: ApplicantReq
        """
        return util.deserialize_model(dikt, cls)

    @property
    def industry(self) -> str:
        """Gets the industry of this ApplicantReq.


        :return: The industry of this ApplicantReq.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry: str):
        """Sets the industry of this ApplicantReq.


        :param industry: The industry of this ApplicantReq.
        :type industry: str
        """

        self._industry = industry

    @property
    def area(self) -> str:
        """Gets the area of this ApplicantReq.


        :return: The area of this ApplicantReq.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area: str):
        """Sets the area of this ApplicantReq.


        :param area: The area of this ApplicantReq.
        :type area: str
        """

        self._area = area

    @property
    def applicant(self) -> str:
        """Gets the applicant of this ApplicantReq.


        :return: The applicant of this ApplicantReq.
        :rtype: str
        """
        return self._applicant

    @applicant.setter
    def applicant(self, applicant: str):
        """Sets the applicant of this ApplicantReq.


        :param applicant: The applicant of this ApplicantReq.
        :type applicant: str
        """

        self._applicant = applicant

    @property
    def key(self) -> str:
        """Gets the key of this ApplicantReq.


        :return: The key of this ApplicantReq.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this ApplicantReq.


        :param key: The key of this ApplicantReq.
        :type key: str
        """

        self._key = key

    @property
    def theme(self) -> str:
        """Gets the theme of this ApplicantReq.


        :return: The theme of this ApplicantReq.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme: str):
        """Sets the theme of this ApplicantReq.


        :param theme: The theme of this ApplicantReq.
        :type theme: str
        """

        self._theme = theme
