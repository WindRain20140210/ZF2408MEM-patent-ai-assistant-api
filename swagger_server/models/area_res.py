# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.area_res_areas import AreaResAreas  # noqa: F401,E501
from swagger_server.models.area_res_years import AreaResYears  # noqa: F401,E501
from swagger_server import util


class AreaRes(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, years: AreaResYears=None, areas: AreaResAreas=None):  # noqa: E501
        """AreaRes - a model defined in Swagger

        :param years: The years of this AreaRes.  # noqa: E501
        :type years: AreaResYears
        :param areas: The areas of this AreaRes.  # noqa: E501
        :type areas: AreaResAreas
        """
        self.swagger_types = {
            'years': AreaResYears,
            'areas': AreaResAreas
        }

        self.attribute_map = {
            'years': 'years',
            'areas': 'areas'
        }
        self._years = years
        self._areas = areas

    @classmethod
    def from_dict(cls, dikt) -> 'AreaRes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AreaRes of this AreaRes.  # noqa: E501
        :rtype: AreaRes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def years(self) -> AreaResYears:
        """Gets the years of this AreaRes.


        :return: The years of this AreaRes.
        :rtype: AreaResYears
        """
        return self._years

    @years.setter
    def years(self, years: AreaResYears):
        """Sets the years of this AreaRes.


        :param years: The years of this AreaRes.
        :type years: AreaResYears
        """

        self._years = years

    @property
    def areas(self) -> AreaResAreas:
        """Gets the areas of this AreaRes.


        :return: The areas of this AreaRes.
        :rtype: AreaResAreas
        """
        return self._areas

    @areas.setter
    def areas(self, areas: AreaResAreas):
        """Sets the areas of this AreaRes.


        :param areas: The areas of this AreaRes.
        :type areas: AreaResAreas
        """

        self._areas = areas
