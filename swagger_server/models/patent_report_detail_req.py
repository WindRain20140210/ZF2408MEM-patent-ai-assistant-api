# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PatentReportDetailReq(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, report_id: int=None, type: str=None, sub_title: str=None, content: str=None, data: str=None):  # noqa: E501
        """PatentReportDetailReq - a model defined in Swagger

        :param report_id: The report_id of this PatentReportDetailReq.  # noqa: E501
        :type report_id: int
        :param type: The type of this PatentReportDetailReq.  # noqa: E501
        :type type: str
        :param sub_title: The sub_title of this PatentReportDetailReq.  # noqa: E501
        :type sub_title: str
        :param content: The content of this PatentReportDetailReq.  # noqa: E501
        :type content: str
        :param data: The data of this PatentReportDetailReq.  # noqa: E501
        :type data: str
        """
        self.swagger_types = {
            'report_id': int,
            'type': str,
            'sub_title': str,
            'content': str,
            'data': str
        }

        self.attribute_map = {
            'report_id': 'report_id',
            'type': 'type',
            'sub_title': 'sub_title',
            'content': 'content',
            'data': 'data'
        }
        self._report_id = report_id
        self._type = type
        self._sub_title = sub_title
        self._content = content
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'PatentReportDetailReq':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PatentReportDetailReq of this PatentReportDetailReq.  # noqa: E501
        :rtype: PatentReportDetailReq
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_id(self) -> int:
        """Gets the report_id of this PatentReportDetailReq.


        :return: The report_id of this PatentReportDetailReq.
        :rtype: int
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id: int):
        """Sets the report_id of this PatentReportDetailReq.


        :param report_id: The report_id of this PatentReportDetailReq.
        :type report_id: int
        """

        self._report_id = report_id

    @property
    def type(self) -> str:
        """Gets the type of this PatentReportDetailReq.


        :return: The type of this PatentReportDetailReq.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this PatentReportDetailReq.


        :param type: The type of this PatentReportDetailReq.
        :type type: str
        """

        self._type = type

    @property
    def sub_title(self) -> str:
        """Gets the sub_title of this PatentReportDetailReq.


        :return: The sub_title of this PatentReportDetailReq.
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title: str):
        """Sets the sub_title of this PatentReportDetailReq.


        :param sub_title: The sub_title of this PatentReportDetailReq.
        :type sub_title: str
        """

        self._sub_title = sub_title

    @property
    def content(self) -> str:
        """Gets the content of this PatentReportDetailReq.


        :return: The content of this PatentReportDetailReq.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this PatentReportDetailReq.


        :param content: The content of this PatentReportDetailReq.
        :type content: str
        """

        self._content = content

    @property
    def data(self) -> str:
        """Gets the data of this PatentReportDetailReq.


        :return: The data of this PatentReportDetailReq.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this PatentReportDetailReq.


        :param data: The data of this PatentReportDetailReq.
        :type data: str
        """

        self._data = data
