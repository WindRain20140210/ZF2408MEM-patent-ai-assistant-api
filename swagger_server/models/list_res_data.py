# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ListResData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, title: str=None, status: int=None, is_deleted: int=None, batch_id: int=None):  # noqa: E501
        """ListResData - a model defined in Swagger

        :param id: The id of this ListResData.  # noqa: E501
        :type id: int
        :param title: The title of this ListResData.  # noqa: E501
        :type title: str
        :param status: The status of this ListResData.  # noqa: E501
        :type status: int
        :param is_deleted: The is_deleted of this ListResData.  # noqa: E501
        :type is_deleted: int
        :param batch_id: The batch_id of this ListResData.  # noqa: E501
        :type batch_id: int
        """
        self.swagger_types = {
            'id': int,
            'title': str,
            'status': int,
            'is_deleted': int,
            'batch_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'status': 'status',
            'is_deleted': 'is_deleted',
            'batch_id': 'batch_id'
        }
        self._id = id
        self._title = title
        self._status = status
        self._is_deleted = is_deleted
        self._batch_id = batch_id

    @classmethod
    def from_dict(cls, dikt) -> 'ListResData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ListRes_data of this ListResData.  # noqa: E501
        :rtype: ListResData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this ListResData.


        :return: The id of this ListResData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ListResData.


        :param id: The id of this ListResData.
        :type id: int
        """

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this ListResData.


        :return: The title of this ListResData.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this ListResData.


        :param title: The title of this ListResData.
        :type title: str
        """

        self._title = title

    @property
    def status(self) -> int:
        """Gets the status of this ListResData.


        :return: The status of this ListResData.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this ListResData.


        :param status: The status of this ListResData.
        :type status: int
        """

        self._status = status

    @property
    def is_deleted(self) -> int:
        """Gets the is_deleted of this ListResData.


        :return: The is_deleted of this ListResData.
        :rtype: int
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted: int):
        """Sets the is_deleted of this ListResData.


        :param is_deleted: The is_deleted of this ListResData.
        :type is_deleted: int
        """

        self._is_deleted = is_deleted

    @property
    def batch_id(self) -> int:
        """Gets the batch_id of this ListResData.


        :return: The batch_id of this ListResData.
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id: int):
        """Sets the batch_id of this ListResData.


        :param batch_id: The batch_id of this ListResData.
        :type batch_id: int
        """

        self._batch_id = batch_id
