# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Trend2ResData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, year: str=None, authorization_num: int=None, apply_num: int=None, proportion: float=None):  # noqa: E501
        """Trend2ResData - a model defined in Swagger

        :param year: The year of this Trend2ResData.  # noqa: E501
        :type year: str
        :param authorization_num: The authorization_num of this Trend2ResData.  # noqa: E501
        :type authorization_num: int
        :param apply_num: The apply_num of this Trend2ResData.  # noqa: E501
        :type apply_num: int
        :param proportion: The proportion of this Trend2ResData.  # noqa: E501
        :type proportion: float
        """
        self.swagger_types = {
            'year': str,
            'authorization_num': int,
            'apply_num': int,
            'proportion': float
        }

        self.attribute_map = {
            'year': 'year',
            'authorization_num': 'authorization_num',
            'apply_num': 'apply_num',
            'proportion': 'proportion'
        }
        self._year = year
        self._authorization_num = authorization_num
        self._apply_num = apply_num
        self._proportion = proportion

    @classmethod
    def from_dict(cls, dikt) -> 'Trend2ResData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Trend2Res_data of this Trend2ResData.  # noqa: E501
        :rtype: Trend2ResData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def year(self) -> str:
        """Gets the year of this Trend2ResData.


        :return: The year of this Trend2ResData.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year: str):
        """Sets the year of this Trend2ResData.


        :param year: The year of this Trend2ResData.
        :type year: str
        """

        self._year = year

    @property
    def authorization_num(self) -> int:
        """Gets the authorization_num of this Trend2ResData.


        :return: The authorization_num of this Trend2ResData.
        :rtype: int
        """
        return self._authorization_num

    @authorization_num.setter
    def authorization_num(self, authorization_num: int):
        """Sets the authorization_num of this Trend2ResData.


        :param authorization_num: The authorization_num of this Trend2ResData.
        :type authorization_num: int
        """

        self._authorization_num = authorization_num

    @property
    def apply_num(self) -> int:
        """Gets the apply_num of this Trend2ResData.


        :return: The apply_num of this Trend2ResData.
        :rtype: int
        """
        return self._apply_num

    @apply_num.setter
    def apply_num(self, apply_num: int):
        """Sets the apply_num of this Trend2ResData.


        :param apply_num: The apply_num of this Trend2ResData.
        :type apply_num: int
        """

        self._apply_num = apply_num

    @property
    def proportion(self) -> float:
        """Gets the proportion of this Trend2ResData.


        :return: The proportion of this Trend2ResData.
        :rtype: float
        """
        return self._proportion

    @proportion.setter
    def proportion(self, proportion: float):
        """Sets the proportion of this Trend2ResData.


        :param proportion: The proportion of this Trend2ResData.
        :type proportion: float
        """

        self._proportion = proportion
